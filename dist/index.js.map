{"version":3,"file":"index.js","mappings":";;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../../../../../../.nvm/versions/node/v22.10.0/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack/bootstrap","../webpack/runtime/compat",".././index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","import * as core from '@actions/core';\nimport * as github from '@actions/github';\n\nasync function fetchQuote() {\n  const response = await fetch('https://zenquotes.io/api/random');\n  if (!response.ok) {\n    throw new Error(`Failed to fetch quote: ${response.statusText}`);\n  }\n\n  const [quoteData] = await response.json();\n  if (!quoteData?.q || !quoteData?.a) {\n    throw new Error('Quote or author not found in API response.');\n  }\n\n  return {\n    quote: quoteData.q,\n    author: quoteData.a,\n  };\n}\n\nasync function postComment(octokit, message) {\n  await octokit.rest.issues.createComment({\n    issue_number: github.context.issue.number,\n    owner: github.context.repo.owner,\n    repo: github.context.repo.repo,\n    body: message,\n  });\n}\n\nasync function run() {\n  try {\n    const token = core.getInput('GITHUB_TOKEN', { required: true });\n    const octokit = github.getOctokit(token);\n\n    const { quote, author } = await fetchQuote();\n    const message = `ðŸ’¬ \"${quote}\" - ${author}`;\n\n    await postComment(octokit, message);\n    core.setOutput('quote', `${quote} - ${author}`);\n  } catch (error) {\n    core.setFailed(`Action failed: ${error.message}`);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}